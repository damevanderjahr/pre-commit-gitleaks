#!/bin/sh

get_os_arch() {
    arch=$(uname -m)
    case $arch in
        arm64)
            echo "arm64"
            ;;
        aarch64)
            echo "arm64"
            ;;
        x86_64)
            echo "x64"
            ;;
        i686)
            echo "x32"
            ;;
        armv6*)
            echo "armv6"
            ;;
        armv7*)
            echo "armv7"
            ;;
        *)
            echo "Unknown arch, arch $arch is not supported"
            exit 1
            ;;
    esac
}

get_os_type() {
    case "$(uname -s)" in
        Darwin)
            echo "darwin"
            ;;
        Linux)
            echo "linux"
            ;;
        CYGWIN*|MINGW32*|MSYS*|MINGW*)
            echo "windows"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

get_archive_type() {
    case $1 in
        windows)
            echo "zip"
        ;;
        *)
            echo "tar.gz"
        ;;
    esac
}

extract_gitleaks() {
    local archive="$1"
    local ext="$2"  # Extract file extension
    case "$ext" in
        tar.gz)
            tar -xzf "$archive" 'gitleaks' -C .git/hooks/
            ;;
        zip)
            unzip -o "$archive" 'gitleaks.exe' -d .git/hooks/
            ;;
        *)
            echo "Unsupported archive format."
            return 1
            ;;
    esac
}

while [ $# -gt 0 ]; do
    case "$1" in
        -u|--update)
            is_update="true"
            shift 1
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  -u, --update      Update / reinstall gitleaks"
            echo "  -h, --help        Display this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

if ! [ -d ".git" ]; then
    echo "This is not a git repo, exiting"
    exit 1
fi

is_enabled=$(git config --local --get hooks.pre-commit.enable)

if { ! [ -f ".git/hooks/gitleaks" ] && ! [ -f ".git/hooks/gitleaks.exe" ] ;} || [ -z "$is_enabled" ] || [ "$is_update" = "true" ]; then
    # Call the function to get the OS architecture
    os_arch=$(get_os_arch)
    echo "The OS architecture is: $os_arch"
    # Call the function to get the OS type
    os_type=$(get_os_type)
    echo "The OS type is: $os_type"
    # Call the function to get the archive type 
    archive_type=$(get_archive_type "$os_type")
    echo "The archive type is: $archive_type"
    # Get actual gitleaks release number
    gitleaks_tag=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases?per_page=1 | grep -o '"tag_name": *"[^"]*"' | cut -d '"' -f 4 | sed 's/^.\(.*\)$/\1/')
    echo "The actual gitleaks release is is: $gitleaks_tag"
    # Construct file names and links
    archive_file_name="gitleaks_${gitleaks_tag}_${os_type}_${os_arch}.${archive_type}"
    echo "Archive File name: $archive_file_name"
    download_link="https://github.com/gitleaks/gitleaks/releases/download/v${gitleaks_tag}/${archive_file_name}"
    echo "Download link $download_link"
    # download and unpack gitleaks executable
    curl -L -o "$archive_file_name" "$download_link"
    extract_gitleaks "$archive_file_name" "$archive_type"
    rm "$archive_file_name"

    # set git config enable
    git config --local --add hooks.pre-commit.enable true
fi

if [ "$is_enabled" = "true" ]; then
    gl=".git/hooks/gitleaks"
    if [ "$(get_os_type)" = "windows" ]; then
        gl=".git/hooks/gitleaks.exe"
    fi
    $gl protect -v --staged

fi